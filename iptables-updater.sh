#!/bin/bash
DOMAIN="google.com"
FIREWALL_RULES_PATH="/var/important_firewall_rules.fw"

generateFirewallRules() {
rm $FIREWALL_RULES_PATH
echo "# Generated by iptables-save v1.4.14 at $(getCurrentTimeHour)h$(getCurrentTimeMinutes)m" > $FIREWALL_RULES_PATH
echo "*nat" >> $FIREWALL_RULES_PATH
echo ":PREROUTING ACCEPT [33:2860]" >> $FIREWALL_RULES_PATH
echo ":POSTROUTING ACCEPT [0:0]" >> $FIREWALL_RULES_PATH
echo ":OUTPUT ACCEPT [0:0]" >> $FIREWALL_RULES_PATH
echo "-A PREROUTING -p tcp -m tcp --dport 80 -j DNAT --to-destination $1:80" >> $FIREWALL_RULES_PATH
echo "-A POSTROUTING -j MASQUERADE" >> $FIREWALL_RULES_PATH
echo "COMMIT" >> $FIREWALL_RULES_PATH
echo "# Completed at $(getCurrentTimeHour)h$(getCurrentTimeMinutes)m" >> $FIREWALL_RULES_PATH
echo "# Generated by iptables-save v1.4.14 at $(getCurrentTimeHour)h$(getCurrentTimeMinutes)m" >> $FIREWALL_RULES_PATH
echo "*mangle" >> $FIREWALL_RULES_PATH
echo ":PREROUTING ACCEPT [2190:149745]" >> $FIREWALL_RULES_PATH
echo ":INPUT ACCEPT [2132:146424]" >> $FIREWALL_RULES_PATH
echo ":FORWARD ACCEPT [58:3321]" >> $FIREWALL_RULES_PATH
echo ":OUTPUT ACCEPT [2042:148760]" >> $FIREWALL_RULES_PATH
echo ":POSTROUTING ACCEPT [2054:148489]" >> $FIREWALL_RULES_PATH
echo "COMMIT" >> $FIREWALL_RULES_PATH
echo "# Completed at $(getCurrentTimeHour)h$(getCurrentTimeMinutes)m" >> $FIREWALL_RULES_PATH
echo "# Generated by iptables-save v1.4.14 at $(getCurrentTimeHour)h$(getCurrentTimeMinutes)m" >> $FIREWALL_RULES_PATH
echo "*filter" >> $FIREWALL_RULES_PATH
echo ":INPUT ACCEPT [2132:146424]" >> $FIREWALL_RULES_PATH
echo ":FORWARD ACCEPT [58:3321]" >> $FIREWALL_RULES_PATH
echo ":OUTPUT ACCEPT [1996:145168]" >> $FIREWALL_RULES_PATH
echo "COMMIT" >> $FIREWALL_RULES_PATH
echo "# Completed at $(getCurrentTimeHour)h$(getCurrentTimeMinutes)m" >> $FIREWALL_RULES_PATH
}

updateFirewallRules() {
iptables-restore < $FIREWALL_RULES_PATH
}

getIp() {
local IP=`dig +short $DOMAIN`
echo $IP
}

sendUpdateMessage() {
echo "Update, current IP: " $CURRENT_IP "Time:" $(getCurrentTimeHour)"h"$(getCurrentTimeMinutes)"m"
}

getCurrentTimeHour() {
 date +"%H"
}

getCurrentTimeMinutes() {
 date +"%M"
}

CURRENT_IP=$("getIp")
NEW_IP=$CURRENT_IP

echo $(sendUpdateMessage)

while true;
do
    NEW_IP=$("getIp")
    if [ $CURRENT_IP = $NEW_IP ]; then 
            echo "No update called, IP remains the same."
    else
            CURRENT_IP=$NEW_IP
            generateFirewallRules $NEW_IP
            updateFirewallRules
            sendUpdateMessage
    fi
    sleep 3h
done